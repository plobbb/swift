import sys
import platform

def cmake_bool(val):
    val = val.upper()
    if val in ["FALSE", "NO", "OFF", "N", "IGNORE", "0", "NOTFOUND", ""]
        return False
    if val.endswith("-NOTFOUND"):
        return False
    return True

## Autogenerated by Swift configuration.
# Do not edit!
config.llvm_src_root = "@LLVM_MAIN_SRC_DIR@"
config.llvm_obj_root = "@LLVM_BINARY_DIR@"
config.llvm_tools_dir = "@LLVM_TOOLS_DIR@"
config.llvm_libs_dir = "@LLVM_LIBS_DIR@"
config.lit_tools_dir = "@LLVM_LIT_TOOLS_DIR@"
config.swift_src_root = "@SWIFT_SOURCE_DIR@"
config.swift_obj_root = "@SWIFT_BINARY_DIR@"
config.target_triple = "@TARGET_TRIPLE@"
config.targets_to_build = "@TARGETS_TO_BUILD@"
config.variant_triple = "@VARIANT_TRIPLE@"
config.variant_suffix = "@VARIANT_SUFFIX@"
config.variant_sdk = "@VARIANT_SDK@"
config.darwin_xcrun_toolchain = "@SWIFT_DARWIN_XCRUN_TOOLCHAIN@"

config.coverage_mode = "@SWIFT_ANALYZE_CODE_COVERAGE@"

if cmake_bool("@SWIFT_ASAN_BUILD@"):
    config.available_features.add("asan")
else:
    config.available_features.add('no_asan')

if cmake_bool("@LLVM_ENABLE_ASSERTIONS@"):
    config.available_features.add('asserts')
else:
    config.available_features.add('no_asserts')

if cmake_bool("@SWIFT_STDLIB_ASSERTIONS@"):
    config.available_features.add('swift_stdlib_asserts')
else:
    config.available_features.add('swift_stdlib_no_asserts')

if cmake_bool("@SWIFT_OPTIMIZED@"):
    config.available_features.add("optimized_stdlib")

# Let the main config do the real work.
config.test_exec_root = os.path.dirname(os.path.realpath(__file__))
lit_config.load_config(config, "@SWIFT_SOURCE_DIR@/validation-test/lit.cfg")

